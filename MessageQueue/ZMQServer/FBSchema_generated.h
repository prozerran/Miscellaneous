// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_FBSCHEMA_ORDERBOOK_BOOK_H_
#define FLATBUFFERS_GENERATED_FBSCHEMA_ORDERBOOK_BOOK_H_

#include "flatbuffers/flatbuffers.h"

namespace OrderBook {
namespace Book {

struct Price;

struct Order;

struct Contract;

enum Side {
  Side_Buy = 0,
  Side_Sell = 1,
  Side_Short = 2,
  Side_MIN = Side_Buy,
  Side_MAX = Side_Short
};

inline const Side (&EnumValuesSide())[3] {
  static const Side values[] = {
    Side_Buy,
    Side_Sell,
    Side_Short
  };
  return values;
}

inline const char * const *EnumNamesSide() {
  static const char * const names[] = {
    "Buy",
    "Sell",
    "Short",
    nullptr
  };
  return names;
}

inline const char *EnumNameSide(Side e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesSide()[index];
}

enum Strategies {
  Strategies_NONE = 0,
  Strategies_Contract = 1,
  Strategies_MIN = Strategies_NONE,
  Strategies_MAX = Strategies_Contract
};

inline const Strategies (&EnumValuesStrategies())[2] {
  static const Strategies values[] = {
    Strategies_NONE,
    Strategies_Contract
  };
  return values;
}

inline const char * const *EnumNamesStrategies() {
  static const char * const names[] = {
    "NONE",
    "Contract",
    nullptr
  };
  return names;
}

inline const char *EnumNameStrategies(Strategies e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesStrategies()[index];
}

template<typename T> struct StrategiesTraits {
  static const Strategies enum_value = Strategies_NONE;
};

template<> struct StrategiesTraits<Contract> {
  static const Strategies enum_value = Strategies_Contract;
};

bool VerifyStrategies(flatbuffers::Verifier &verifier, const void *obj, Strategies type);
bool VerifyStrategiesVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types);

MANUALLY_ALIGNED_STRUCT(4) Price FLATBUFFERS_FINAL_CLASS {
 private:
  float spot_;
  float open_;
  float close_;

 public:
  Price() {
    memset(this, 0, sizeof(Price));
  }
  Price(float _spot, float _open, float _close)
      : spot_(flatbuffers::EndianScalar(_spot)),
        open_(flatbuffers::EndianScalar(_open)),
        close_(flatbuffers::EndianScalar(_close)) {
  }
  float spot() const {
    return flatbuffers::EndianScalar(spot_);
  }
  float open() const {
    return flatbuffers::EndianScalar(open_);
  }
  float close() const {
    return flatbuffers::EndianScalar(close_);
  }
};
STRUCT_END(Price, 12);

struct Order FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_ID = 4,
    VT_PRICE = 6,
    VT_BROKER = 8,
    VT_STOCKCODE = 10,
    VT_INVENTORY = 14,
    VT_SIDE = 16,
    VT_CONTRACTS = 18,
    VT_STRATEGY_TYPE = 20,
    VT_STRATEGY = 22
  };
  int64_t id() const {
    return GetField<int64_t>(VT_ID, 1000);
  }
  const Price *price() const {
    return GetStruct<const Price *>(VT_PRICE);
  }
  const flatbuffers::String *broker() const {
    return GetPointer<const flatbuffers::String *>(VT_BROKER);
  }
  const flatbuffers::String *stockcode() const {
    return GetPointer<const flatbuffers::String *>(VT_STOCKCODE);
  }
  const flatbuffers::Vector<uint8_t> *inventory() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_INVENTORY);
  }
  Side side() const {
    return static_cast<Side>(GetField<int8_t>(VT_SIDE, 0));
  }
  const flatbuffers::Vector<flatbuffers::Offset<Contract>> *contracts() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Contract>> *>(VT_CONTRACTS);
  }
  Strategies strategy_type() const {
    return static_cast<Strategies>(GetField<uint8_t>(VT_STRATEGY_TYPE, 0));
  }
  const void *strategy() const {
    return GetPointer<const void *>(VT_STRATEGY);
  }
  template<typename T> const T *strategy_as() const;
  const Contract *strategy_as_Contract() const {
    return strategy_type() == Strategies_Contract ? static_cast<const Contract *>(strategy()) : nullptr;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int64_t>(verifier, VT_ID) &&
           VerifyField<Price>(verifier, VT_PRICE) &&
           VerifyOffset(verifier, VT_BROKER) &&
           verifier.Verify(broker()) &&
           VerifyOffset(verifier, VT_STOCKCODE) &&
           verifier.Verify(stockcode()) &&
           VerifyOffset(verifier, VT_INVENTORY) &&
           verifier.Verify(inventory()) &&
           VerifyField<int8_t>(verifier, VT_SIDE) &&
           VerifyOffset(verifier, VT_CONTRACTS) &&
           verifier.Verify(contracts()) &&
           verifier.VerifyVectorOfTables(contracts()) &&
           VerifyField<uint8_t>(verifier, VT_STRATEGY_TYPE) &&
           VerifyOffset(verifier, VT_STRATEGY) &&
           VerifyStrategies(verifier, strategy(), strategy_type()) &&
           verifier.EndTable();
  }
};

template<> inline const Contract *Order::strategy_as<Contract>() const {
  return strategy_as_Contract();
}

struct OrderBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(int64_t id) {
    fbb_.AddElement<int64_t>(Order::VT_ID, id, 1000);
  }
  void add_price(const Price *price) {
    fbb_.AddStruct(Order::VT_PRICE, price);
  }
  void add_broker(flatbuffers::Offset<flatbuffers::String> broker) {
    fbb_.AddOffset(Order::VT_BROKER, broker);
  }
  void add_stockcode(flatbuffers::Offset<flatbuffers::String> stockcode) {
    fbb_.AddOffset(Order::VT_STOCKCODE, stockcode);
  }
  void add_inventory(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> inventory) {
    fbb_.AddOffset(Order::VT_INVENTORY, inventory);
  }
  void add_side(Side side) {
    fbb_.AddElement<int8_t>(Order::VT_SIDE, static_cast<int8_t>(side), 0);
  }
  void add_contracts(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Contract>>> contracts) {
    fbb_.AddOffset(Order::VT_CONTRACTS, contracts);
  }
  void add_strategy_type(Strategies strategy_type) {
    fbb_.AddElement<uint8_t>(Order::VT_STRATEGY_TYPE, static_cast<uint8_t>(strategy_type), 0);
  }
  void add_strategy(flatbuffers::Offset<void> strategy) {
    fbb_.AddOffset(Order::VT_STRATEGY, strategy);
  }
  explicit OrderBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  OrderBuilder &operator=(const OrderBuilder &);
  flatbuffers::Offset<Order> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Order>(end);
    return o;
  }
};

inline flatbuffers::Offset<Order> CreateOrder(
    flatbuffers::FlatBufferBuilder &_fbb,
    int64_t id = 1000,
    const Price *price = 0,
    flatbuffers::Offset<flatbuffers::String> broker = 0,
    flatbuffers::Offset<flatbuffers::String> stockcode = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> inventory = 0,
    Side side = Side_Buy,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Contract>>> contracts = 0,
    Strategies strategy_type = Strategies_NONE,
    flatbuffers::Offset<void> strategy = 0) {
  OrderBuilder builder_(_fbb);
  builder_.add_id(id);
  builder_.add_strategy(strategy);
  builder_.add_contracts(contracts);
  builder_.add_inventory(inventory);
  builder_.add_stockcode(stockcode);
  builder_.add_broker(broker);
  builder_.add_price(price);
  builder_.add_strategy_type(strategy_type);
  builder_.add_side(side);
  return builder_.Finish();
}

inline flatbuffers::Offset<Order> CreateOrderDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int64_t id = 1000,
    const Price *price = 0,
    const char *broker = nullptr,
    const char *stockcode = nullptr,
    const std::vector<uint8_t> *inventory = nullptr,
    Side side = Side_Buy,
    const std::vector<flatbuffers::Offset<Contract>> *contracts = nullptr,
    Strategies strategy_type = Strategies_NONE,
    flatbuffers::Offset<void> strategy = 0) {
  return OrderBook::Book::CreateOrder(
      _fbb,
      id,
      price,
      broker ? _fbb.CreateString(broker) : 0,
      stockcode ? _fbb.CreateString(stockcode) : 0,
      inventory ? _fbb.CreateVector<uint8_t>(*inventory) : 0,
      side,
      contracts ? _fbb.CreateVector<flatbuffers::Offset<Contract>>(*contracts) : 0,
      strategy_type,
      strategy);
}

struct Contract FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_NAME = 4,
    VT_PRICE = 6
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  float price() const {
    return GetField<float>(VT_PRICE, 0.0f);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.Verify(name()) &&
           VerifyField<float>(verifier, VT_PRICE) &&
           verifier.EndTable();
  }
};

struct ContractBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(Contract::VT_NAME, name);
  }
  void add_price(float price) {
    fbb_.AddElement<float>(Contract::VT_PRICE, price, 0.0f);
  }
  explicit ContractBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ContractBuilder &operator=(const ContractBuilder &);
  flatbuffers::Offset<Contract> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Contract>(end);
    return o;
  }
};

inline flatbuffers::Offset<Contract> CreateContract(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    float price = 0.0f) {
  ContractBuilder builder_(_fbb);
  builder_.add_price(price);
  builder_.add_name(name);
  return builder_.Finish();
}

inline flatbuffers::Offset<Contract> CreateContractDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    float price = 0.0f) {
  return OrderBook::Book::CreateContract(
      _fbb,
      name ? _fbb.CreateString(name) : 0,
      price);
}

inline bool VerifyStrategies(flatbuffers::Verifier &verifier, const void *obj, Strategies type) {
  switch (type) {
    case Strategies_NONE: {
      return true;
    }
    case Strategies_Contract: {
      auto ptr = reinterpret_cast<const Contract *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return false;
  }
}

inline bool VerifyStrategiesVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyStrategies(
        verifier,  values->Get(i), types->GetEnum<Strategies>(i))) {
      return false;
    }
  }
  return true;
}

inline const OrderBook::Book::Order *GetOrder(const void *buf) {
  return flatbuffers::GetRoot<OrderBook::Book::Order>(buf);
}

inline const OrderBook::Book::Order *GetSizePrefixedOrder(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<OrderBook::Book::Order>(buf);
}

inline bool VerifyOrderBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<OrderBook::Book::Order>(nullptr);
}

inline bool VerifySizePrefixedOrderBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<OrderBook::Book::Order>(nullptr);
}

inline void FinishOrderBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<OrderBook::Book::Order> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedOrderBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<OrderBook::Book::Order> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Book
}  // namespace OrderBook

#endif  // FLATBUFFERS_GENERATED_FBSCHEMA_ORDERBOOK_BOOK_H_

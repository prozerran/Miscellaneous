// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace OrderBook.Book
{

using global::System;
using global::FlatBuffers;

public struct Instrument : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static Instrument GetRootAsInstrument(ByteBuffer _bb) { return GetRootAsInstrument(_bb, new Instrument()); }
  public static Instrument GetRootAsInstrument(ByteBuffer _bb, Instrument obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public Instrument __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Tag { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string Value { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetValueBytes() { return __p.__vector_as_arraysegment(6); }
  public byte Blob(int j) { int o = __p.__offset(8); return o != 0 ? __p.bb.Get(__p.__vector(o) + j * 1) : (byte)0; }
  public int BlobLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetBlobBytes() { return __p.__vector_as_arraysegment(8); }

  public static Offset<Instrument> CreateInstrument(FlatBufferBuilder builder,
      int tag = 0,
      StringOffset valueOffset = default(StringOffset),
      VectorOffset blobOffset = default(VectorOffset)) {
    builder.StartObject(3);
    Instrument.AddBlob(builder, blobOffset);
    Instrument.AddValue(builder, valueOffset);
    Instrument.AddTag(builder, tag);
    return Instrument.EndInstrument(builder);
  }

  public static void StartInstrument(FlatBufferBuilder builder) { builder.StartObject(3); }
  public static void AddTag(FlatBufferBuilder builder, int tag) { builder.AddInt(0, tag, 0); }
  public static void AddValue(FlatBufferBuilder builder, StringOffset valueOffset) { builder.AddOffset(1, valueOffset.Value, 0); }
  public static void AddBlob(FlatBufferBuilder builder, VectorOffset blobOffset) { builder.AddOffset(2, blobOffset.Value, 0); }
  public static VectorOffset CreateBlobVector(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddByte(data[i]); return builder.EndVector(); }
  public static void StartBlobVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static Offset<Instrument> EndInstrument(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<Instrument>(o);
  }
};


}

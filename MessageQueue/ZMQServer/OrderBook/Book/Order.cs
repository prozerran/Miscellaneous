// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace OrderBook.Book
{

using global::System;
using global::FlatBuffers;

public struct Order : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static Order GetRootAsOrder(ByteBuffer _bb) { return GetRootAsOrder(_bb, new Order()); }
  public static Order GetRootAsOrder(ByteBuffer _bb, Order obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public Order __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)1000; } }
  public Price? Price { get { int o = __p.__offset(6); return o != 0 ? (Price?)(new Price()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public string Broker { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetBrokerBytes() { return __p.__vector_as_arraysegment(8); }
  public string Stockcode { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetStockcodeBytes() { return __p.__vector_as_arraysegment(10); }
  public byte Inventory(int j) { int o = __p.__offset(14); return o != 0 ? __p.bb.Get(__p.__vector(o) + j * 1) : (byte)0; }
  public int InventoryLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetInventoryBytes() { return __p.__vector_as_arraysegment(14); }
  public Side Side { get { int o = __p.__offset(16); return o != 0 ? (Side)__p.bb.GetSbyte(o + __p.bb_pos) : Side.Buy; } }
  public Contract? Contracts(int j) { int o = __p.__offset(18); return o != 0 ? (Contract?)(new Contract()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ContractsLength { get { int o = __p.__offset(18); return o != 0 ? __p.__vector_len(o) : 0; } }
  public Strategies StrategyType { get { int o = __p.__offset(20); return o != 0 ? (Strategies)__p.bb.Get(o + __p.bb_pos) : Strategies.NONE; } }
  public TTable? Strategy<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(22); return o != 0 ? (TTable?)__p.__union<TTable>(o) : null; }
  public Instrument? Instruments(int j) { int o = __p.__offset(24); return o != 0 ? (Instrument?)(new Instrument()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int InstrumentsLength { get { int o = __p.__offset(24); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static void StartOrder(FlatBufferBuilder builder) { builder.StartObject(11); }
  public static void AddId(FlatBufferBuilder builder, long id) { builder.AddLong(0, id, 1000); }
  public static void AddPrice(FlatBufferBuilder builder, Offset<Price> priceOffset) { builder.AddStruct(1, priceOffset.Value, 0); }
  public static void AddBroker(FlatBufferBuilder builder, StringOffset brokerOffset) { builder.AddOffset(2, brokerOffset.Value, 0); }
  public static void AddStockcode(FlatBufferBuilder builder, StringOffset stockcodeOffset) { builder.AddOffset(3, stockcodeOffset.Value, 0); }
  public static void AddInventory(FlatBufferBuilder builder, VectorOffset inventoryOffset) { builder.AddOffset(5, inventoryOffset.Value, 0); }
  public static VectorOffset CreateInventoryVector(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddByte(data[i]); return builder.EndVector(); }
  public static void StartInventoryVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static void AddSide(FlatBufferBuilder builder, Side side) { builder.AddSbyte(6, (sbyte)side, 0); }
  public static void AddContracts(FlatBufferBuilder builder, VectorOffset contractsOffset) { builder.AddOffset(7, contractsOffset.Value, 0); }
  public static VectorOffset CreateContractsVector(FlatBufferBuilder builder, Offset<Contract>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartContractsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddStrategyType(FlatBufferBuilder builder, Strategies strategyType) { builder.AddByte(8, (byte)strategyType, 0); }
  public static void AddStrategy(FlatBufferBuilder builder, int strategyOffset) { builder.AddOffset(9, strategyOffset, 0); }
  public static void AddInstruments(FlatBufferBuilder builder, VectorOffset instrumentsOffset) { builder.AddOffset(10, instrumentsOffset.Value, 0); }
  public static VectorOffset CreateInstrumentsVector(FlatBufferBuilder builder, Offset<Instrument>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartInstrumentsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<Order> EndOrder(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<Order>(o);
  }
  public static void FinishOrderBuffer(FlatBufferBuilder builder, Offset<Order> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedOrderBuffer(FlatBufferBuilder builder, Offset<Order> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
